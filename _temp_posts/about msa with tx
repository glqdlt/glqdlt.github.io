예전 방송 프로모션 서비스 프로젝트에 참가했을 때의 일화이다.
도메인 환경은 대형 방송 송출사로 쿠폰 서버, 포인트 서버, 마일리지 서버, 유저 관리 서버 등
서비스 노드들이 나누어진 msa 구조였다

이런 msa 관계에서는 각 서비스 노드들의 연관된 업무 원자성을 위해 분산 트랜잭션에 관심이 많다.

이를 위한 방법으로

saga 페턴

tcc 패턴

이벤트 드리븐 모델

xa 2pc

등이 있다.

당시 데이터베이스는 물리적으로 같은 장비에있는 걸 공유하기도 하고 완전히 분리된 경우나 다른 서비스 인프라 공급자를 통해 처리가 필요한 부분도 있었다

데이터베이스가 같은 장비에 논리적으로만 구분된 경우에는 단순히 처리할수있겠지만
물리적으로 떨어진 데이터베이스나 다른 인터페이스(레스트풀솨같은) 를 제공하는 인프라 공급자의 경우
같은 데이터베이스 커넥션이 아니기에 분산 트랜잭션을 묶기가 힘들다.

물리적으로 떨어진 데이터베이스의 경우 2pc를 고민해보면 된다.
여기에 물리적으로 쩔어진데다가 벤더도 다른경ㅇ 라면 자바 기준으로 jta와 같은 기능을 구현한 글로벌 트랜잭셩 코디네이팅 프레임워크(atomics)를 사용하면 쉽게 된다.

자 그러면 이제 인터페이스가 완전히 다른 경우는 어떻게 할것인가?
지금까지는 트랜잭션 코디네이팅을 제공하는 구현체들을 하용했기에 쉬웠지만
이제는 이 구현체를 우리가 구현해허 사용해야하는 시점이 됬다.

여기서 나오는 디자인 패턴들이 saga , tcc , event driven 이 있다


