
믹스인과 트레이트 간의 차이

아래 좋은 내용의 내용이 있더라
https://stackoverflow.com/questions/925609/mixins-vs-traits

읽고 난 뒤 매우 공감되었음

- 믹스인은 암시적으로 충돌 (implicit conflict resolution)
- 트레이트는 명시적으로 충돌 (explicit conflict resolution)

믹스인은 동적인 언어에서 가지는 특징에 기반하는 인상이었다. 나는 자바8를 통해서 트레이트를 배웠기 때문에 (SOLID 에서 ISP 인터페이스 분활원칙) default method 가 충돌이 날 경우 새로이 정의해야하는 점에 대해서 이해를 하고 있다.

이는 A.fly(), B.fly() 2개의 같은 함수(@FunctionalInterface 라고 가정하자) 를 동시에 구현 받는 C 클래스가 있을 경우, C 입장에서 A의 fly 와 B의 fly 둘 중에 뭘 사용해야할지 모르는 상황이 생긴다.

C impelments A,B  이렇게 선언이 되기 때문에 어떤게 먼저 치고 왔는 지 판단도 어렵다. 그래서 C 가 직접 fly(){..} 를 구현하게 강제화 한 것이다.

반면 자바스크립트에서 적용되는 Mixin 기법은 (기능이라기 보다는 기법, 테크니컬 이라고 불리더라. 언어 자체 스펙은 아니고, 언어 특징을 서술한 스킬인듯) 프로토타입을 선회해서 

특정 method 만 쏙 빼서 link 시키는 개념이다. 자바스크립트에서 함수는 함수 그 자체가 객체이기 때문에 기능에 해당하는 메소드도 이미 함수임으로, 필드(멤버 변수, 또는 인스턴스 변수) 선언이 가능하다.

반면 자바와 같은 클래스 기반 객체 언어는 클래스가 객체이며, 메소드는 클래스에 붙어있는 존재이기에, 메소드가 객체 최상위가 될 수 없는 특징이 있으며, 객체 자신이 클래스는 컴파일 시점에 구조화된 존재이기 때문에

트레이트를 통해 트레이트의 필드 (멤버 변수, 인스턴스 변수)를 참조할수 없다. 위 설명을 기준으로 하면 C 클래스의 인스턴스는 C 자신에게서만 정의되고, 완성(컴파일) 되기 때문이다.
