https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java

BaseRequest#setScope()

에서 nullpoint입셉션이 난다


ClientDetails#isScoped() 가 false 로 해놔도

getScope() 를 호출해서 이를 복사해가면서 null로 떨어진다 개 웃기네

일단 무의미한 데이터를 넣어놨다. 그러니 통과가 된다.. isScoped() 를 호출해서 비교를 할지 말지에 대한 처리 정도인가보다.

scope 사이즈가 0이어도 동작해야하는게아닌가?


Dispatch Servlet

org.springframework.web.servlet.DispatcherServlet.class ..|> javax.servlet.Servlet

서블릿 표준스펙은 서블릿컨테이너는 web.xml (배포 서술자 라고도 한다) 에 등록된 정보에 따라 특정 REQUEST 엔드포인트에 어떠한 서블릿이 대응할수있을지를 설계하게 되어있다.
예를 들면 아래 web.xml 을 보면 ComingSoonServlet 은 Servlet 인터페이스를 구현한 서블릿이고, 해당 서블릿은 모든 요청이라는 와일드카드 /* 로 설정되어 모든 요청이 ComingSoonServlet#serviet(req,res) 메소드로 전달이 된다.

```xml
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <servlet>
        <servlet-name>comingsoon</servlet-name>
        <servlet-class>mysite.server.ComingSoonServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>comingsoon</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>
</web-app>

```
 
DispatcherServlet 도 Servlet 인터페이스를 구현한 녀석으로, 스프링이 만든 서블릿컨테이너 안의 서블릿컨테이너이다.

예시를 말해보면, 건물은 톰캣과 같은 JavaEE 의 WAS 스펙을 구현한 서버이고, 건물안의 원룸은 Servlet 인터페이스 인 셈이다. 각 101호 102호 와 같은 것이 url path 인 셈이고..

여기서 DispatcherServlet 을 만든 것은 101호 안에서도 101-1호 101-2호 로, 각 방에 세를 놓겠다는 개념과 유사하다고 생각하면 좋다.

나는 101호 라는 원룸 안에서 내부적으로 이것저것 지지고 복고 할 수 있다. 각 방에 세를 두거나 하는 것은 독자적인 나만의 룰로 할수도 있고,

DispatcherServlet 이 딱 그러하다. 스프링 프레임워크 진형 입장에서 자유롭게 창의적으로 접근하려면 자신에게 할당된 서블릿 (예: 101호) 안에서 세계관을 구축할수 있기 떄문이다.

DispacerServlet 의 동작원리를 보면 WAS 
 
 

```
Dispatcher-Servlet이 등장함에 따라 Spring MVC의 web.xml의 역할이 축소되었다. 기존에는 모든 서블릿에 대해 URL 매핑을 활용하기 위해서 web.xml에 모두 등록해주어야만 했다. 그러나 Dispatcher-Servlet이 들어오는 모든 요청을 핸들링해주면서 작업을 상당히 편리하게 할 수 있게 되었다.
Dispatcher Servlet이 요청들을 Controller로 넘겨주는 것은 편해보이지만, 한가지 문제점이 있다. 이미지나 HTML을 불러오는 요청마저 모두 Controller로 넘겨버린다는 것이다. 심지어 JS나 CSS 파일에 대한 요청 모두 Dispatcher-Servlet이 가져가기 때문에 자원 호출이 제대로 이루어지지 않는다. Spring은 이에 대한 해결책으로 <mvc:resources/>를 이용할 수 있도록 내놓았다. 만약 Dispatcher-Servlet에서 해당 요청에 대한 컨트롤러를 찾을 수 없는 경우에, 2차적으로 설정된 경로에서 요청을 탐색하여 자원을 호출할 수 있도록 한 것이다.
```


인터셉터와 필터

<img src='https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg'>

필터는 서블릿에 적용할수 있는 가장 최초의 진입점이며 어플리케이션 컨텍스트 내에서의 글로벌 제약이 가능하다.

인터셉터는 책임연쇄패턴으로 필터를 지나 거쳐온 URL 이 향하는 목적지 path 에 대응가능한 컨트롤러(핸들러매핑)에 넘겨질 때, 해당 핸들러매핑으로 넘어가는 시점을 가로채는 인터셉팅이 가능하다.

이게 무슨말이냐면 인터셉터는 필터와 달리 특정 핸들러매핑에만 인터셉팅이 가능하단 얘기이기 때문에, 핸들러매핑이 여러개라면 















----

### Description

Hello.

When I run the plugin, it says "CommandHandlerImp.java, line 80..
  Deadlocked by process.waitFor()" in the source.

I debugged the problem.

I found the problem in this file (RunMojo.java).

There seems to be a problem with the method below.

RunMojo # checkRuntimeExistence()

This method checks whether the'func' command can be executed. 

The problem arises when the argument of the'showStdout' parameter is false.

If false, pipes the subprocess's stream output to PIPE.

The stream buffer is full and doesn't clear it, leaving it'freeze'.
I have referenced the official documentation below.
(https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html)

> By default, the created subprocess does not have its own terminal or console. All its standard I/O (i.e. stdin, stdout, stderr) operations will be redirected to the parent process, where they can be accessed via the streams obtained using the methods getOutputStream(), getInputStream(), and getErrorStream(). The parent process uses these streams to feed input to and get output from the subprocess. Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock.


It seems that the checkRuntimeExistence() method should be set to INHERIT, not PIPE. Please comment.

I confirmed that it works by setting it to true (INHERIT) in a separate local test code.

I do not speak English well. So I would like to explain it in the source code.

Let's add a Pull Request. please note.

Please comment.

Thank you.

### My Local Env

Windows 10 Enterprise (version 1809)

openjdk version "1.8.0_242"
OpenJDK Runtime Environment (Zulu 8.44.0.11-CA-win64) (build 1.8.0_242-b20)
OpenJDK 64-Bit Server VM (Zulu 8.44.0.11-CA-win64) (build 25.242-b20, mixed mode)


Azure Functions Core Tools
Core Tools Version:       3.0.3388 Commit hash: fb42a4e0b7fdc85fbd0bcfc8d743ff7d509122ae
Function Runtime Version: 3.0.15371.0

Intelij IDEA 2020.1.2



### Plugin name and version

```
    <artifactId>azure-functions-maven-plugin</artifactId>
    <version>1.9.1</version>

```

### Plugin configuration in your `pom.xml`

```
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <azure.functions.maven.plugin.version>1.9.1</azure.functions.maven.plugin.version>
        <azure.functions.java.library.version>1.4.0</azure.functions.java.library.version>
        <functionAppName>logicapp-1617072939138</functionAppName>
        <stagingDirectory>${project.build.directory}/azure-functions/${functionAppName}</stagingDirectory>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>2.4.4</version>
        </dependency>
        <dependency>
            <groupId>com.microsoft.azure.functions</groupId>
            <artifactId>azure-functions-java-library</artifactId>
            <version>${azure.functions.java.library.version}</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.4.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.23.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.microsoft.azure</groupId>
                <artifactId>azure-functions-maven-plugin</artifactId>
                <version>${azure.functions.maven.plugin.version}</version>
                <configuration>
                    <!-- function app name -->
                    <appName>${functionAppName}</appName>
                    <!-- function app resource group -->
                    <resourceGroup>java-functions-group</resourceGroup>
                    <!-- function app service plan name -->
                    <appServicePlanName>java-functions-app-service-plan</appServicePlanName>
                    <!-- function app region-->
                    <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-regions for all valid values -->
                    <region>westus</region>
                    <!-- function pricingTier, default to be consumption if not specified -->
                    <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-pricing-tiers for all valid values -->
                    <!-- <pricingTier></pricingTier> -->

                    <!-- Whether to disable application insights, default is false -->
                    <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details for all valid configurations for application insights-->
                    <!-- <disableAppInsights></disableAppInsights> -->
                    <runtime>
                        <!-- runtime os, could be windows, linux or docker-->
                        <os>windows</os>
                        <javaVersion>8</javaVersion>
                        <!-- for docker function, please set the following parameters -->
                        <!-- <image>[hub-user/]repo-name[:tag]</image> -->
                        <!-- <serverId></serverId> -->
                        <!-- <registryUrl></registryUrl>  -->
                    </runtime>
                    <appSettings>
                        <property>
                            <name>FUNCTIONS_EXTENSION_VERSION</name>
                            <value>~3</value>
                        </property>
                    </appSettings>
                </configuration>
                <executions>
                    <execution>
                        <id>package-functions</id>
                        <goals>
                            <goal>package</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <outputDirectory>${stagingDirectory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}</directory>
                                    <includes>
                                        <include>host.json</include>
                                        <include>local.settings.json</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${stagingDirectory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <includeScope>runtime</includeScope>
                            <excludeArtifactIds>azure-functions-java-library</excludeArtifactIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--Remove obj folder generated by .NET SDK in maven clean-->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>obj</directory>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

```

### Expected behavior

1. mvn clean package
2. mvn azure-functions:run
3. start app

### Actual behavior

1. mvn clean package
2. mvn azure-functions:run

### Steps to reproduce the problem


0. INTELLIJ IDEA open, java source.
1. mvn clean package
2. mvn azure-functions:run
3. freeze console ( I waited more than an hour) ...



